---
description: project structure 
globs: 
alwaysApply: false
---
# Unity Sea Survival Game - 개발 가이드라인

## 프로젝트 개요
해양 생존 게임으로, 플레이어는 바다에서 적들과 싸우며 생존하는 2D 탑다운 게임입니다.

## 아키텍처 구조

### 1. 폴더 구조
```
Assets/sea-survival/Scripts/
├── Players/          # 플레이어 관련 스크립트
├── Enemies/          # 적 및 스폰 시스템
├── Weapons/          # 무기 시스템
├── CardSystem/       # 카드/업그레이드 시스템
├── StageSystem/      # 스테이지 및 상태 관리
├── InGame/           # 게임플레이 매니저들
├── MainMenu/         # 메인 메뉴 관련
├── Contracts/        # 인터페이스 정의
├── Enums/           # 열거형 정의
└── Legacy/          # 레거시 코드
```

### 2. 핵심 아키텍처 패턴

#### Singleton 패턴
- 모든 매니저 클래스는 `SingletonMonoBehaviour<T>` 상속
- 예: `Player`, `StageManager`, `WeaponManager`, `CardManager`
- 접근: `Player.Ins`, `StageManager.Ins` 등

#### Interface 기반 설계
- `IDamageable`: 데미지를 받을 수 있는 객체
- `IWeapon`: 무기 시스템의 기본 인터페이스

#### State 패턴
- 스테이지 시스템에서 `StageState` 기반 상태 관리
- `BattleStageState`, `RestState` 등

## 코딩 컨벤션

### 1. 네이밍 규칙
- **클래스명**: PascalCase (예: `PlayerLevelSystem`)
- **메소드명**: PascalCase (예: `TakeDamage`)
- **필드명**: camelCase, private 필드는 underscore prefix (예: `_isInvincible`)
- **프로퍼티명**: PascalCase (예: `CurrentMoveSpeed`)
- **상수명**: UPPER_SNAKE_CASE

### 2. 네임스페이스 규칙
```csharp
namespace sea_survival.Scripts.{FolderName}
```
예시:
- `sea_survival.Scripts.Players`
- `sea_survival.Scripts.Weapons`
- `sea_survival.Scripts.Enemies`

### 3. 스크립트 구조 템플릿
```csharp
using UnityEngine;
using sea_survival.Scripts.Contracts;
// 다른 필요한 using 문들

namespace sea_survival.Scripts.{FolderName}
{
    public class ClassName : MonoBehaviour
    {
        [Header("카테고리명")]
        [SerializeField] private float fieldName;
        
        // Public Properties
        public float PropertyName => fieldName;
        
        // Private Fields
        private ComponentType _componentRef;
        
        // Unity Lifecycle
        private void Awake() { }
        private void Start() { }
        private void Update() { }
        
        // Public Methods
        public void PublicMethod() { }
        
        // Private Methods
        private void PrivateMethod() { }
    }
}
```

## 시스템별 구현 가이드

### 1. 플레이어 시스템
- **산소 시스템**: 수중/수면 상태에 따른 산소 소모/회복
- **이동 제어**: 일반 모드와 호흡 모드 구분
- **체력 관리**: HP, HP 재생, 무적 시간
- **레벨 시스템**: 경험치 획득 및 레벨업

### 2. 적 시스템
- **기본 적**: `Enemy` 클래스 기반
- **보스**: `Boss` 클래스, 특수 패턴
- **스폰 시스템**: Wave 기반 스폰
- **충돌 처리**: 플레이어 데미지, 넉백 효과

### 3. 무기 시스템
- **기본 구조**: `WeaponBase` 추상 클래스 상속
- **무기 타입**: `WeaponType` 열거형으로 관리
- **레벨 시스템**: 3단계 레벨 (Level1, Level2, Level3)
- **자동 공격**: Update에서 타이머 기반 공격

### 4. 카드 시스템
- **카드 타입**: 무기 카드, 스탯 카드
- **UI 상호작용**: 호버 효과, 클릭 이벤트
- **효과 적용**: 무기 추가 또는 스탯 증가

### 5. 스테이지 시스템
- **상태 기반**: `StageState` 패턴 사용
- **전투/휴식**: `BattleStageState`, `RestState`
- **진행 관리**: 포탈을 통한 스테이지 이동

## 성능 최적화 가이드

### 1. 오브젝트 풀링
- 적, 투사체, 이펙트는 오브젝트 풀링 권장
- Resources.Load보다는 직접 참조 선호

### 2. Update 최적화
- 매 프레임 실행이 필요하지 않은 로직은 코루틴 또는 타이머 사용
- null 체크 최소화

### 3. 메모리 관리
- 이벤트 구독/해제 명확히 관리
- 임시 객체 생성 최소화


### 2. Inspector 디버깅
- `[SerializeField, ReadOnly]` 또는 Odin Inspector 활용
- 중요한 상태값들은 Inspector에서 확인 가능하도록 설정

## 확장 가이드

### 1. 새로운 무기 추가
1. `WeaponType` 열거형에 새 무기 타입 추가
2. `WeaponBase` 상속받아 새 무기 클래스 생성
3. `WeaponManager`에 무기 등록
4. 해당 무기의 `CardData` 생성

### 2. 새로운 적 추가
1. `Enemy` 클래스 상속 또는 컴포지션
2. `IDamageable` 인터페이스 구현
3. 스폰 시스템에 등록

### 3. 새로운 스테이지 상태 추가
1. `StageState` 상속받아 새 상태 클래스 생성
2. `StageManager`에서 상태 전환 로직 추가

## 품질 보증

### 1. 코드 리뷰 체크리스트
- [ ] 네이밍 컨벤션 준수
- [ ] 적절한 네임스페이스 사용
- [ ] 인터페이스 구현 완료
- [ ] null 체크 및 예외 처리
- [ ] 성능 최적화 고려

### 2. 테스트 가이드
- 플레이어 이동 및 산소 시스템 테스트
- 무기 자동 공격 및 레벨업 테스트
- 적 스폰 및 충돌 테스트
- 카드 선택 및 효과 적용 테스트

## 추가 개발 시 주의사항

### 1. 의존성 관리
- Singleton 클래스 간 순환 참조 방지
- Start()에서 다른 Singleton 접근 시 초기화 순서 고려

### 2. 씬 관리
- 씬 전환 시 Singleton 상태 초기화 확인
- DontDestroyOnLoad 객체 관리

### 3. 데이터 관리
- ScriptableObject 활용한 데이터 에셋 관리

- 하드코딩된 값들을 설정 가능한 필드로 변경 